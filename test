// Example: Injected at build time
const CURRENT_RELEASE_ID = "v1.2.5"; // Change this every deployment


async function clearSiteData() {
  localStorage.clear();
  sessionStorage.clear();

  document.cookie.split(';').forEach(cookie => {
    document.cookie = cookie
      .replace(/^ +/, '')
      .replace(/=.*/, '=;expires=' + new Date(0).toUTCString() + ';path=/');
  });

  if ('indexedDB' in window) {
    const dbs = await indexedDB.databases();
    dbs.forEach(db => indexedDB.deleteDatabase(db.name));
  }

  if ('caches' in window) {
    const names = await caches.keys();
    names.forEach(name => caches.delete(name));
  }

  if ('serviceWorker' in navigator) {
    const registrations = await navigator.serviceWorker.getRegistrations();
    registrations.forEach(reg => reg.unregister());
  }

  console.log('[ðŸ”¥] Cleared site data due to release update');
}

async function clearOnReleaseChange(currentVersion: string) {
  const STORED_KEY = 'app_release_id';
  const previousVersion = localStorage.getItem(STORED_KEY);

  if (previousVersion !== currentVersion) {
    console.log(`[ðŸ†•] Detected new release: ${previousVersion} â†’ ${currentVersion}`);
    await clearSiteData();
    localStorage.setItem(STORED_KEY, currentVersion);
    location.reload(); // or redirect to login/home
  } else {
    console.log(`[âœ…] Release up-to-date: ${currentVersion}`);
  }
}
clearOnReleaseChange(CURRENT_RELEASE_ID);
